name: Manual Generate APK
on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Build Type'
        required: true
        default: 'staging'


jobs:
  build_production:
    runs-on: macos-latest
    if: ${{ github.event.inputs.type == 'release' }}



    steps:

      #Set Up Java 11
      - name: Checkout
        uses: actions/checkout@v1

      - name: Decode Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'keystore/keystore_github_action.jks'
          encodedString: ${{ secrets.SIGNING_KEY }}

      - name: Setup Java JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11


      # Setup Runtime Local Properties Generation & Credentials configured in Github Secrets
      - name: Decode Secrets to Create local properties
        run: echo keyAlias=${{ secrets.RELEASE_ALIAS_KEY }} >> local.properties
      - run: echo keyPassword=${{ secrets.RELEASE_ALIAS_PASSWORD }} >> local.properties
      - run: echo storePassword=${{ secrets.RELEASE_STORE_PASSWORD }} >> local.properties
      - run: echo keyAliasStage=${{ secrets.STAGING_ALIAS_KEY }} >> local.properties
      - run: echo keyPasswordStage=${{ secrets.STAGING_ALIAS_PASSWORD }} >> local.properties
      - run: echo storePasswordStage=${{ secrets.STAGING_STORE_PASSWORD }} >> local.properties
      - run: echo PROJ_NAME=${{ secrets.PROJ_NAME }} >> local.properties
      - run: |
          echo "Log type: ${{ github.event.inputs.type }}"
          echo "${{ github.event.inputs.type }} == release"
      - run: cat local.properties




      # SetUp Gradle for Linux
      - name: Gradle Executable
        run: chmod +x ./gradlew

      # Clean App
      - name: Clean Build
        run: ./gradlew clean --stacktrace

      # Test build
      - name: Run Test
        run: ./gradlew test

      - name: build prod
        run: ./gradlew app:bundleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.RELEASE_ALIAS_KEY }}
          SIGNING_KEY_PASSWORD: ${{ secrets.RELEASE_ALIAS_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}


      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: Build Artifacts
          path: app/build/outputs/

    #  # Sign APK
    #  - name: Sign APP
    #    uses: r0adkll/sign-android-release@v1
    #    id: sign_app
    #    with:
    #      releaseDirectory: app/build/outputs/apk/android/release
    #      signingKeyBase64: ${{ secrets.SIGNING_KEY }}
    #      alias: ${{ secrets.RELEASE_ALIAS_KEY }}
    #      keyStorePassword: ${{ secrets.RELEASE_STORE_PASSWORD }}
    #      keyPassword: ${{ secrets.RELEASE_ALIAS_PASSWORD }}
#
    #  # Upload Artifact
    #  - uses: actions/upload-artifact@master
    #    with:
    #      name: release.apk
    #      path: ${{steps.sign_app.outputs.signedReleaseFile}}

      # Mapping File
      - uses: actions/upload-artifact@master
        with:
          name: mapping.txt
          path: app/build/outputs/mapping/androidRelease/mapping.txt


  build_qa:
    runs-on: macos-latest
    if: ${{ github.event.inputs.type != 'release' }}


    steps:

      #Set Up Java 11
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Java JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Setup Runtime Local Properties Generation & Credentials configured in Github Secrets
      - name: Decode Secrets to Create local properties
        run: echo keyAlias=${{ secrets.RELEASE_ALIAS_KEY }} >> local.properties
      - run: echo keyPassword=${{ secrets.RELEASE_ALIAS_PASSWORD }} >> local.properties
      - run: echo storePassword=${{ secrets.RELEASE_STORE_PASSWORD }} >> local.properties
      - run: echo keyAliasStage=${{ secrets.STAGING_ALIAS_KEY }} >> local.properties
      - run: echo keyPasswordStage=${{ secrets.STAGING_ALIAS_PASSWORD }} >> local.properties
      - run: echo storePasswordStage=${{ secrets.STAGING_STORE_PASSWORD }} >> local.properties
      - run: |
          echo "Log type: ${{ github.event.inputs.type }}"
          echo "${{ github.event.inputs.type }} != release"

      # SetUp Gradle for Linux
      - name: Gradle Executable
        run: chmod +x ./gradlew

      # Clean App
      - name: Clean Build
        run: ./gradlew clean --stacktrace

      # Test build
      - name: Run Test
        run: ./gradlew test

      # Build Project
      - name: Build Project
        run: ./gradlew assemble

      # Assemble Android Staging Apk
      - name: Satge Apk Assemble
        run: ./gradlew assembleAndroidStaging

      # Artifact for Staging Apk
      - name: Staging Apk Artifact
        uses: actions/upload-artifact@v1
        with:
          name: Staging Apk
          path: app/build/outputs/apk/android/staging/app-android-staging.apk